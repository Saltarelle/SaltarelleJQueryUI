<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="draggable" namespace="fn" type="Widget" widgetnamespace="ui">
	<desc>Allow mouse interactions with elements, moving them around</desc>
	<longdesc>
		<p>The jQuery UI Draggable plugin makes selected elements draggable by mouse.</p>
		<p>Draggable elements gets a class of <code>ui-draggable</code>. During drag the element also gets a class of <code>ui-draggable-dragging</code>. If you want not just drag, but drag-and-drop, see the jQuery UI Droppable plugin, which provides a drop target for draggables.</p>
	</longdesc>
	<created>1.0</created>
	<options>
		<option name="addClasses" default='true'>
			<desc>If set to false, will prevent the <code>ui-draggable</code> class from being added. This may be desired as a performance optimization when calling <code>.draggable()</code> init on many hundreds of elements.</desc>
			<type name="Boolean" />
		</option>
		<option name="appendTo" default='"parent"'>
			<desc>The element passed to or selected by the <code>appendTo</code> option will be used as the draggable helper's container during dragging. By default, the helper is appended to the same container as the draggable.</desc>
			<type name="Element" />
			<type name="Selector" />
		</option>
		<option name="axis" default='false'>
			<desc>Constrains dragging to either the horizontal (x) or vertical (y) axis. Possible values: 'x', 'y'.</desc>
			<type name="String" />
		</option>
		<option name="cancel" default='":input,option"'>
			<desc>Prevents dragging from starting on specified elements.</desc>
			<type name="Selector" />
		</option>
		<option name="connectToSortable" default='false'>
			<desc>Allows the draggable to be dropped onto the specified sortables. If this option is used (<code>helper</code> must be set to 'clone' in order to work flawlessly), a draggable can be dropped onto a sortable list and then becomes part of it.</desc>
			<type name="Selector" />
		</option>
		<option name="containment" default='false'>
			<desc>Constrains dragging to within the bounds of the specified element or region. Possible string values: 'parent', 'document', 'window', [x1, y1, x2, y2].</desc>
			<type name="Selector" />
			<type name="Element" />
			<type name="String" />
			<type name="Array" />
		</option>
		<option name="cursor" default='"auto"'>
			<desc>The css cursor during the drag operation.</desc>
			<type name="String" />
		</option>
		<option name="cursorAt" default='false'>
			<desc>Sets the offset of the dragging helper relative to the mouse cursor. Coordinates can be given as a hash using a combination of one or two keys: <code>{ top, left, right, bottom }</code>.</desc>
			<type name="Object" />
		</option>
		<option name="delay" default='0'>
			<desc>Time in milliseconds after mousedown until dragging should start. This option can be used to prevent unwanted drags when clicking on an element.</desc>
			<type name="Number" />
		</option>
		<option name="disabled" default="false">
			<desc>Disables the draggable if set to true.</desc>
			<type name="Boolean" />
		</option>
		<option name="distance" default='1'>
			<desc>Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.</desc>
			<type name="Number" />
		</option>
		<option name="grid" default='false'>
			<desc>Snaps the dragging helper to a grid, every x and y pixels. Array values: [x, y]</desc>
			<type name="Array" />
		</option>
		<option name="handle" default='false'>
			<desc>If specified, restricts drag start click to the specified element(s).</desc>
			<type name="Selector" />
			<type name="Element" />
		</option>
		<option name="helper" default='"original"'>
			<desc>Allows for a helper element to be used for dragging display. Possible values: 'original', 'clone', Function. If a function is specified, it must return a DOMElement.</desc>
			<type name="String" />
			<type name="Function" />
		</option>
		<option name="iframeFix" default='false'>
			<desc>Prevent iframes from capturing the mousemove events during a drag. Useful in combination with cursorAt, or in any case, if the mouse cursor is not over the helper. If set to true, transparent overlays will be placed over all iframes on the page. If a selector is supplied, the matched iframes will have an overlay placed over them.</desc>
			<type name="Boolean" />
			<type name="Selector" />
		</option>
		<option name="opacity" default='false'>
			<desc>Opacity for the helper while being dragged.</desc>
			<type name="Number" />
		</option>
		<option name="refreshPositions" default='false'>
			<desc>If set to true, all droppable positions are calculated on every mousemove. Caution: This solves issues on highly dynamic pages, but dramatically decreases performance.</desc>
			<type name="Boolean" />
		</option>
		<option name="revert" default='false'>
			<desc>If set to true, the element will return to its start position when dragging stops. Possible string values: 'valid', 'invalid'. If set to invalid, revert will only occur if the draggable has not been dropped on a droppable. For valid, it's the other way around.</desc>
			<type name="Boolean" />
			<type name="String" />
		</option>
		<option name="revertDuration" default='500'>
			<desc>The duration of the revert animation, in milliseconds. Ignored if revert is false.</desc>
			<type name="Number" />
		</option>
		<option name="scope" default='"default"'>
			<desc>Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.</desc>
			<type name="String" />
		</option>
		<option name="scroll" default='true'>
			<desc>If set to true, container auto-scrolls while dragging.</desc>
			<type name="Boolean" />
		</option>
		<option name="scrollSensitivity" default='20'>
			<desc>Distance in pixels from the edge of the viewport after which the viewport should scroll. Distance is relative to pointer, not the draggable.</desc>
			<type name="Number" />
		</option>
		<option name="scrollSpeed" default='20'>
			<desc>The speed at which the window should scroll once the mouse pointer gets within the <code>scrollSensitivity</code> distance.</desc>
			<type name="Number" />
		</option>
		<option name="snap" default='false'>
			<desc>If set to a selector or to true (equivalent to '.ui-draggable'), the draggable will snap to the edges of the selected elements when near an edge of the element.</desc>
			<type name="Boolean" />
			<type name="Selector" />
		</option>
		<option name="snapMode" default='"both"'>
			<desc>Determines which edges of snap elements the draggable will snap to. Ignored if snap is false. Possible values: 'inner', 'outer', 'both'</desc>
			<type name="String" />
		</option>
		<option name="snapTolerance" default='20'>
			<desc>The distance in pixels from the snap element edges at which snapping should occur. Ignored if snap is false.</desc>
			<type name="Number" />
		</option>
		<option name="stack" default='false'>
			<desc>Controls the z-Index of the set of elements that match the selector, always brings to front the dragged item. Very useful in things like window managers.</desc>
			<type name="Selector" />
		</option>
		<option name="zIndex" default='false'>
			<desc>z-index for the helper while being dragged.</desc>
			<type name="Number" />
		</option>

	</options>
	<events>
		<event name="create">
			<desc>
				This event is triggered when the draggable is created.
			</desc>
			<argument name="event" type="Event">
			</argument>
			<argument name="ui" type="Object">
			</argument>
		</event>
		<event name="start" type="dragstart">
			<desc>This event is triggered when dragging starts.</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper that's being dragged</desc>
				</property>
				<property name="position" type="Object">
					<desc>Current position of the helper as <code>{ top, left }</code> object, relative to the offset element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>Current absolute position of the helper as <code>{ top, left }</code> object, relative to page</desc>
				</property>
			</argument>
		</event>
		<event name="drag" type="drag">
			<desc>This event is triggered when the mouse is moved during the dragging.</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper that's being dragged</desc>
				</property>
				<property name="position" type="Object">
					<desc>Current position of the helper as <code>{ top, left }</code> object, relative to the offset element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>Current absolute position of the helper as <code>{ top, left }</code> object, relative to page</desc>
				</property>
			</argument>
		</event>
		<event name="stop" type="dragstop">
			<desc>This event is triggered when dragging stops.</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper that's being dragged</desc>
				</property>
				<property name="position" type="Object">
					<desc>Current position of the helper as <code>{ top, left }</code> object, relative to the offset element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>Current absolute position of the helper as <code>{ top, left }</code> object, relative to page</desc>
				</property>
			</argument>
		</event>

	</events>
	<methods>
		<widget-inherit id="widget-destroy" />
		<widget-inherit id="widget-disable" />
		<widget-inherit id="widget-enable" />
		<widget-inherit id="widget-get-options" />
		<widget-inherit id="widget-get-option" />
		<widget-inherit id="widget-set-option" />
		<widget-inherit id="widget-set-options" />
		<widget-inherit id="widget-widget" />
	</methods>
	<example>

		<desc>Initialize a draggable with default options.</desc>
		<inhead><![CDATA[<style type="text/css">
    #draggable { width: 100px; height: 70px; background: silver; }
  </style>]]></inhead>
		<code><![CDATA[$("#draggable").draggable();]]></code>
		<html><![CDATA[
<div id="draggable">Drag me</div>

]]></html>

	</example>
	<category slug="interactions"/>
</entry>

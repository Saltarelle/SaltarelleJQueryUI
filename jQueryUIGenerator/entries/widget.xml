<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="widget" namespace="fn" widgetnamespace="ui" type="ui">
	<desc>Create stateful jQuery plugins using the same abstraction that all jQuery UI widgets.</desc>
	<longdesc>
		<p>You can create new widgets from scratch, using just the <code>$.Widget</code> object as base to inherit from, or you can explicitly inherit from existing jQuery UI or third-party widgets. Defining a widget with the same name as you inherit from even allows you to extend widgets in place.</p>

		<p>For now, more details can be found at <a href="https://github.com/scottgonzalez/widget-factory-docs/">github.com/scottgonzalez/widget-factory-docs/</a></p>
	</longdesc>
	<signature returns="jQuery">
		<desc>Initialize the widget.</desc>
		<argument name="options" type="Options" optional="true">
			<desc>A map of options to override defaults on initialization.</desc>
		</argument>
	</signature>
	<signature>
		<desc>Call a widget method after initialization.</desc>
		<argument name="method" type="Methods">
			<desc>The name of the method to call.</desc>
		</argument>
		<argument name="..." type="Rest" optional="true">
			<desc>All additional arguments are passed as arguments to the method.</desc>
		</argument>
	</signature>
	<options>
		<option name="disabled" type="Boolean" default="false">
			<desc>Disables the widget if set to true.</desc>
		</option>
	</options>
	<methods>
		<method name="_create">
			<desc>This is the widget's constructor.</desc>
		</method>
    <method name="_createWidget">
      <desc></desc>
    </method>
		<method name="_init">
			<desc>
				Widgets have the concept of initialization that is distinct from creation. Any time the plugin is called with no arguments or with only an option hash, the widget is initialized; this includes when the widget is created.
				<p>Initialization should only be handled if there is a logical action to perform on successive calls to the widget with no arguments.</p>
			</desc>
		</method>
		<method name="destroy">
			<desc>The <code>destroy()</code> method cleans up all common data, events, etc. and then delegates out to <code>_destroy()</code> for custom cleanup. </desc>
		</method>
    <method name="_getCreateOptions">
      <desc></desc>
    </method>
		<method name="_setOptions" return="jQuery">
			<desc>
				Called with a hash of key/value pairs to set whenever the <code>option()</code> method is called, regardless of the form in which option() was called.
				<p>Overriding this is useful if you can defer processor-intensive changes for multiple option changes.</p>
			</desc>
			<argument name="options" type="Object"></argument>
		</method>
		<method name="_setOption" return="jQuery">
			<desc>
				Called from <code>_setOptions()</code> for each individual option.
				<p>Widget state should be updated based on changes.</p>
			</desc>
			<argument name="key" type="String"></argument>
			<argument name="value" type="Object"></argument>
		</method>
    <method name="_trigger" return="Boolean">
			<desc>
				Triggers an event and its associated callback.
				<p>The option with the name equal to type is invoked as the callback.</p>
				<p>The event name is the widget name + type.</p>
			</desc>
			<argument name="type" type="String" />
			<argument name="event" type="Event" optional="true">
				<desc>The original event that caused this event to occur; useful for providing context to the listener</desc>
			</argument>
			<argument name="data" type="Object" optional="true">
				<desc>A hash of data associated with the event</desc>
			</argument>
		</method>
    <method name="disable" return="widget">
      <desc></desc>
    </method>
    <method name="enable" return="widget">
      <desc></desc>
    </method>
    <method name="option" return="widget">
      <desc></desc>
      <argument name="key" type="String"></argument>
      <argument name="value" type="Object"></argument>
    </method>
    <method name="option" return="widget">
      <desc></desc>
      <argument name="options" type="Rest"></argument>
    </method>
    <method name="widget" return="widget">
      <desc></desc>
    </method>
	</methods>
	<events>
		<event name="create">
			<desc>
				This event is triggered when the <entryname/> is created.
			</desc>
			<argument name="event" type="Event">
			</argument>
			<argument name="ui" type="Object">
			</argument>
		</event>
	</events>
	<category slug="widgets"/>
</entry>
